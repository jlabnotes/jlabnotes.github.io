[ { "title": "Jira JQL - searching JSM Queries", "url": "/posts/jql-search-jsm-queries/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2024-08-27 09:00:00 +0200", "snippet": "Searching for Jira Service Management fields and valuesJira Service Management has specific fields with specific values, relating only to that Atlassian product.QueriesApprovalsApprovals in Jira Service Management workflows.approvals = approved()approvals = approver(\"john smith\")approvals = pending()approvals = pendingBy(\"john smith\")approvals = myPendingApproval()OrganisationsOrganizations are used to group customers and determine which requests they can view in the JSM customer portal.reporter in organizationMembers(organization-name)organizations = organization-nameorganizations in (organization1, organization2)Service Level Agreements (SLAs)SLAs represent a goal or commitment between service providers and customers.SLA-name = breached()SLA-name = paused()SLA-name = running()SLA-name = completed()\"Time to Resolution\" &gt; elapsed(\"8h\")\"Time to Resolution\" &gt; remaining(\"8h\")" }, { "title": "Jira JQL - searching Text", "url": "/posts/jql-search-text/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-26 08:00:00 +0100", "snippet": "About searching datesSearching for text seems to be the most unpredictable type of search in Jira. There are many questions on Atlassian Community from users which complained about wrong results despite the well written queries.I know from answers given to these questions that a lot of depends on indexing the database, configuration of character encoding (like Unicode Standard), language used and so on. So, in case some of your queries do not return expected results, do not be surprised (too much).Generally, you can search for text stored in text type fields like Summary, Description, Comments, custom fields and third-party custom fields. However, you may encounter some problems with searching through text fields in Jira Cloud. It is best to start writing JQL queries in Jira Cloud in the Simple Mode first.More about search syntax for text fields:Atlassian Support - search syntax for text fieldsQueriesJQL: 6.1text ~ \"project approved \"Display all issues containing both words in any single text field, for example: a title, description or comments.JQL: 6.2description ~ \"we have a problem with\"Show me issues where the description contains the term “we have a problem”JQL: 6.3comment ~ \"approved\" AND comment ~ \"confirmed\"Display issues where there are two words in the same commentJQL: 6.4\"Change Comment\" ~ \"approved\" OR \"Change Comment\" ~ \"rejected\"Jira Data Center and Server: Show me issues where the custom field Change Comment contains words approved or rejectedJQL: 6.5\"Change Comment\" ~ \"approved OR rejected\" AND assignee = currentUser()Jira Data Center and Server: An example of a compound query with OR operator. Show me issues where the custom field Change Comment contains words approved or rejected to which the current user is assigned. The operators must be in CAPITAL letters.JQL: 6.6\"Change Comment[Short text]\" ~ \"approved\" OR \"Change Comment[Short text]\" ~ \"confirmed\"Jira Cloud: Show me issues where the custom field Change Comment contains words approved or rejected. The segment [Short text] is added automatically when you select the custom field of this type.JQL: 6.7\"Keyword[Short text]\" ~ \"approved AND confirmed\"Jira Cloud: Show me issues where the custom field Keyword contains both words approved AND rejected. The operator in the quotation marks must be in CAPITAL letters.JQL: 6.8comment ~ \"error 4*\"Display all issues where one of the comments contains the term that begins with the text error 4. This will return issues with comments like error 4, error 45, error 4850" }, { "title": "Jira JQL - searching Dates queries", "url": "/posts/jql-search-dates-queries/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-26 08:00:00 +0100", "snippet": "Due datesJQL: 5.1due &gt; 7dShow me issues due more than (after) 7 days from now in the futureJQL: 5.2due &lt;= 3dShow me issues due within exactly the next 3 days from now (after now and before +3d from now)JQL: 5.3due &gt;= \"0\" AND due &lt;= 5dShow me issues that are not overdue now and are due in the next 5 days from now. NB. “0” is just another way to set the current time, just like function now()JQL: 5.4due &gt;= 7d AND due &lt;= 10dIssues due within the next 7d to 10dJQL: 5.5due &lt;= -1wShow me all issues that were due more than 1 week ago. This can easily be narrowed down with status type for example AND status = Open, to get overdue issuesJQL: 5.6due &lt; endOfYear(3M)Find issues due by the end of March next year. This one is really interesting because it takes into account calendar months. You do not have to write the “+” character additionally.JQL: 5.7due &gt;= startOfDay() AND due &lt;= 7dDisplay issues that are due in the next 7 days from midnight today (that is when the start of day begins)JQL: 5.8due &lt; endOfDay()Show me issues that are due by today any time before 23h59. This will include all issues from the past as well. The endOfDay() function will calculate the data in parentheses taking into account the date today.JQL: 5.9due &lt; endOfDay(1)Select issues that are due by tomorrow any time before 23h59. This will include issues from the past as well. Jira knows that you want to ask about tomorrow because you gave number 1 in parentheses. You do not have to write additionally the “+” or the “d” characters.JQL: 5.10due &gt;= 2020-09-15 AND due &lt; 2020-09-25Today is the 20th of September. Show me issues that are, were or will be due between two specific dates. The past or the future depends on when this query is run. In this example all times on 2020-09-24 are included. It may be confusing because 25 of September is used. When you use the parameter “less than” only the previous day up to 23h59 will be taken into account. Make sure that you use the correct date format configured in your Jira.JQL: 5.11due &gt;= startOfWeek(1w) AND due &lt;= endOfWeek(2w)Display issues due between Sunday next week and Saturday the following week (depends on the first day settings in Jira)JQL: 5.12duedate &lt; now() and resolution = UnresolvedFind issues that now overdue but still are not resolved ( due &lt; “0” will also search for overdue issues, because the duedate field name is an alias of due)Created and UpdatedJQL: 5.13updated &lt; 2020-09-18Show me all issues that were updated on 17 September 2020 or earlier (it is not a mistake, yes 17 September). This query will work because 18 September starts at 00:00 (midnight) so this will return issues updated until 23:59:59 on 17 SeptemberJQL: 5.14updated &gt;= 2020-09-20 AND updated &lt; 2020-09-21Show me issues updated exactly on 20 September 2020. Normally you do not specify a time when searching for an exact date, therefore Jira will assume midnight on the date you provide. When you type the query like this, you will search all issues across all 23 hours and 59 seconds for that date up to but not including (&lt;) 12:00 midnight the following day (21 Sept)JQL: 5.15updated &gt;= -2w AND updated &lt;= -1wDisplay issues updated more than 1 week ago but not more than 2 weeks ago (within a specific period of time in the past)JQL: 5.16updatedDate &gt; startOfDay(-1) AND updatedDate &lt; endOfDay(-1)Show me all issues that were updated during the whole 24 hours (1 calendar day) yesterday. ‘updatedDate’ is an alias name of the ‘updated’ fieldJQL: 5.17updated &gt;=-5d AND resolution = unresolvedDisplay issue that have been updated within the past 5 days and are unresolvedJQL: 5.18status = \"In Progress\" and NOT updated &gt;= startOfDay(-2w)Show me all issues that are in status ‘In Progress’ and have not been updated for over 2 weeks. They may require your attention.JQL: 5.19created &gt;= -2d and resolved &lt; startOfDay(-1d)Show me issues created within the last two days i.e. 48 hours from current time and resolved before the start of yesterday. If it is 15h00 in the afternoon, Jira will go back exactly 48 hours from now and not from the start of day.JQL: 5.20created &gt;=startOfDay(-5)ORDER BY UpdatedDisplay issues created within the last 5 days from midnight (12 a.m.) today, sorted by the Updated date. It is important to note the current moment in time is not a reference point. That is why using startOf…and endOf… functions is more specific than using the current moment of time as the relative date reference.JQL: 5.21createdDate &gt;= startOfWeek (-1)Display issues created since last week. The function startOfWeek returns the data result so Jira will calculate on what date was the start of last week (and it depends on the first calendar date configuration in your instance)JQL: 5.22createdDate &gt;= 2020-09-20Search for issues created on and after 20 September 2020. When you specify a date Jira assumes midnight on the date you provide.JQL: 5.23created &gt; \"2020-09-28 21:12\"Search for issues created later than on 28 September 2020 at 21:12JQL: 5.24(created &gt; lastLogin() OR created &gt; currentLogin()) AND creator = currentUser()Show me the issues that I created during my last session or during this session. Note that Creator is not the same as Reporter because the value in field Reporter can be changed. The operator OR widens the search resultsJQL: 5.25created &lt; currentLogin AND creator = currentUser()Search for issues created before the current login session of the user executing this queryIssue historyJQL: 5.26issue IN issueHistory() AND assignee = currentUser()Find issues which I have recently viewed, that are assigned to meJQL: 5.27issue IN issueHistory() AND assignee = currentUser()A very useful query for a personal dashboard. Show me up to 50 issues that I have viewed recently.JQL: 5.28status CHANGED FROM \"In QA Review\" TO \"QA Rejected\" BY jsmith DURING (StartOfWeek(-1), EndOfWeek(-1))Show me issues that were transitioned to indicated status by a user jsmith during the last week. Please note that in Jira startOfWeek() starts Sunday 00:00:00 endOfweek() is Saturday 23:59:59 where a week has default settings. However, if you want the current week to be Mon-Sun, use “startOfWeek(1d), endOfWeek(1d)”. Similarly, if you want the previous week to be Mon-Sun, use “(startOfWeek(-6d), endOfWeek(-6d))”JQL: 5.29!(status CHANGED AFTER '-1w')Knowing how to use negation is very useful in JQL. Here is an example on how to display only these issues where the status did not change in the last week.JQL: 5.30status CHANGED AFTER startOfMonth()Search for issues whose status changed after the first calendar day of the current month. Should be useful when you want to check if some resolved issues from the last month did not change their status this month. If you use it as a filter to which you subscribe, you can create in this way an alerting notification mechanism.JQL: 5.31status CHANGED TO (\"In Progress\",Done) DURING (-24h, Now())Search issues that were transitioned to Done or Closed within the last 24 hoursJQL: 5.32status WAS \"In Progress\" DURING (startOfWeek(), endOfWeek())Search for issues that were in Progress any time last week.JQL: 5.33status WAS \"In Progress\" DURING (2020-09-01, 2020-09-30)Search for issues that were in Progress any time between the specified dates (make sure that you use your configured format of dates in your Jira instance).JQL: 5.34status WAS IN (Done, Approved) ORDER BY updatedDate ASCSearch for issues that were or are in one of selected status and order results by the date they were updated ascendingJQL: 5.35status WAS Closed BY currentUser() DURING (startOfWeek(-1), endOfWeek())Search for issues that were transitioned to Closed by the user executing this query within the last two weeks from first day of the week last week to the last day of this weekJQL: 5.36resolution WAS NOT Duplicate BEFORE 2020-09-01Display issues that were not resolved as Duplicate before 1st September 2020 (so on 31 August or earlier).JQL: 5.37statusCategory = \"In Progress\" AND duedate &gt;= startOfMonth(1) AND duedate &lt;= endOfMonth(1)Search for all issues that are in the status category “In Progress” (with any status name) that will be due next calendar month. If you change the parameter to -1 then you can search the same for issue that WERE due last calendar month.JQL: 5.38status CHANGED TO \"In Progress\" BEFORE StartOfDay (-7d) AND status = \"In Progress\"Search for all issues that were transitioned more than 7 calendar days ago to status in Progress and still are in this status.JQL: 5.39status WAS Done AFTER startOfWeek()Show me all the issues where the status WAS or IS Done since the start of this week. In most configurations in Jira, the week starts on Sunday not on Monday. There is some confusion about it, so it is better to do some testing first.JQL: 5.40resolved &gt;= -2w AND resolved &lt;= -1wShow me all issues resolved within 2 and 1 weeks agoJQL: 5.41resolved &lt;= - 1dDisplay issues resolved more than 1 day agoJQL: 5.42resolution WAS Done BY currentUser()Show me issues that at any point in time were resolved as Done by a current user. It will also show these which are now still resolved as Done as well as these which some time in the past were resolvedJQL: 5.43priority WAS High BEFORE 2020-09-25Display issues that had the field value Priority set as High on 2020-09-24 and earlierJQL: 5.44issue IN issueHistory() and creator = currentUser()Display up to 50 issues that I looked at recently (stored in my issue browsing history) which I createdVersions and SprintsVersiongrouping of issues in a specific releasefixversion = version-namefixversion in (version1, version2)fixversion is not emptyfixversion in unreleasedVersions()fixversion = earliestUnreleasedVersion()fixversion = latestReleasedVersion()affectedVersion = version-nameSprinttime-boxed iteration of rapid worksprint in futureSprints()sprint = sprint-IDsprint = sprint-namesprint in (sprint1, sprint2, sprint3)sprint is empty" }, { "title": "Jira JQL - searching Dates introduction", "url": "/posts/jql-search-dates-intro/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-26 08:00:00 +0100", "snippet": "Units of timeThese queries will help you find issues based on dates or dates range.There are the following units of time in JQL with corresponding letters which you need to use in queries: y – Years M – Months (note: this one is a capital letter) w – Weeks d – Days h – hours m – minutesTimelineIn order to understand queries involving dates and time, you need to visualise yourself a timeline, where now is the current moment in time and which in Jira is represented as now().There are four periods of time that you can ask about in Jira (see the picture above). They are divided by the operators which are easy to remember: Operator “&lt;” – translates as “before” or “earlier than”.For example &lt;-1d means before/earlier than one day in the past from this moment. Operator “&gt;” – translates as “after”. For example, &gt;-1d means after one day in the past till now (and in the future if it is possible for a specific field).In fields Created, Updated, Resolved, the dates refer to the past. The past can be divided into two periods of time: past within a specific period of time – this can be determined with an operator greater than “&gt;” or, if you want to include this specific moment of time, you use the operator greater than equal “&gt;=” (what happened after a specific moment in the past) past with an unspecified period of time – if you want to include all the past dates before now or before a point of time in the past, you just use the operator less than “&lt;”.This will all be clearer to you when you see a few examples.In the same way we can divide the future. Queries about the future work only with the field “due” or the alias “duedate”. However, please note that the duedate can also be in the past (e.g. task was due)Specifying timeAnother important thing to remember is that if you do not specify a time while searching for a specific date (and normally we do not do it), Jira will assume that you want to start searching from midnight on that date e.g. 2020-09-20 00:00. If you are interested in issues up to 23:59 on 2020-09-19 or previous days, use the query: &lt; 2020-09-20.You should know that exact times are also stored in Jira along with dates, and they can be checked in the issues filter view.Often when you create many issues in a very short period of time and want to sort them by date, they will be sorted not so much by the date but by the time they were created in Jira." }, { "title": "Jira JQL - searching People", "url": "/posts/jql-search-people/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-25 08:00:00 +0100", "snippet": "Searching for user names in Jira DC and Jira CloudSearching for users by their usernames is possible only in Jira Data Center and Server but not in Jira Cloud.In the Cloud version, when you create a JQL search query for a user in any of the fields Assignee, Reporter or any custom user-picker, Jira will display them as Atlassian Account ID.JQL: 4.1project = DMP AND assignee = currentUser()This query will use the login of the user who executes it and will list all the issues from the specific project. Using the function currentUser() makes the JQL queries easier to maintain because you do not have to create individual queries for each user.JQL: 4.2assignee != currentUser()Display all issues which are NOT assigned to a user who runs this query. This is a very useful function if you want to write a universal query which will show different results depending on the user which runs the queryJQL: 4.3assignee not IN (EMPTY, currentUser())Display all issues which are neither unassigned nor assigned to the current user – they are assigned, and to the current user but to somebody else..JQL: 4.4assignee IN membersOf(\"jira-administrators\")Show me all issues where an assignee belongs to a user group jira-administrators. Using the function membersOf makes the query easier to maintain because you do not have to list all the users in one team, and the list is maintained on the group levelJQL: 4.5assignee WAS NOT jsmithJira Data Center and Server only: Show me all issues except those where the assignee WAS or still is user jsmith.JQL: 4.6assignee WAS NOT 5c7074fe36d4d54c411328f9Jira Cloud: Please note that in Jira Cloud the user name will be converted to ID identifier, so the query will have to use this ID identifier: 5c7074fe36d4d54c411328f9JQL: 4.7assignee WAS currentUser() and assignee != currentUser()Jira Data Center and Server only: Display issues where a user executing the query was an assignee but is not any moreJQL: 4.8assignee WAS currentUser() DURING (2020-09-01, 2020-09-30)Display issues where the current user was an assignee in September 2020.JQL: 4.9assignee WAS NOT jsmithShow me all issues except those where the assignee WAS or still is user jsmith. Please note that in Jira Cloud the user name will be converted to ID identifier, so the query will look like this: assignee WAS 5c7074da7dae4b6533848198JQL: 4.10NOT assignee = currentUser() AND NOT creator = currentUser()Display all issues not reported by and not assigned to a current user executing this query. The operator NOT works the same as the != operator. Please also note that issue creator is not the same as issue Reporter. Unlike Reporter, this value cannot be modified.JQL: 4.11comment ~ currentuser() AND updatedDate &gt;= endOfDay(-10d) ORDER BY lastViewed DESCJira Data Center and Server only: Show me all issues where I am mentioned, not older than 10 days and sort them by when I have recently viewed them descending.JQL: 4.12comment ~ 5c7074da7dae4b6533848198 AND updatedDate &gt;= endOfDay(-10d) ORDER BY updatedDate DESCJira Cloud only. Please note that in Jira Cloud you will have to know the user ID identifier to run queries with specific users.Show me all issues where I am mentioned (my Jira Cloud ID is after the tilde symbol), not older than 10 days and sort them by updated date descending. Unfortunately, in Jira Cloud in this context the function currentUser does not work”JQL: 4.13creator IN membersOf(\"developers\") Display issues created by the members of a user group developers or jira-administratorsJQL: 4.14issue IN updatedBy(\"jira-admin\", \"2020/09/01\", \"2020/09/30\")Search for issues created, updated any field or made a comment by a specific user in September 2020. Creating an issue is a form of its updating" }, { "title": "Jira JQL - searching Issue Fields", "url": "/posts/jql-search-issue-fields/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-25 08:00:00 +0100", "snippet": "Issue Fields: StatusJQL: 3.1status CHANGED FROM \"New\" TO \"In Progress\" BY currentUser()Show all issues transitioned from New to In Progress by the current userJQL: 3.2status CHANGED FROM \"New\" TO \"In Progress\" AFTER StartOfWeek()Show all issues transitioned from New to In Progress since Monday at 0.00am. Please note that in most configurations in Jira, the week starts on Sunday not on Monday. It is better to do some testing first if you cannot check it in settings.JQL: 3.3status changed TO \"In Progress\" BEFORE StartOfDay (-7d) AND status = \"In Progress\"Search for all issues that were transitioned 7 calendar days ago to status In Progress and is still in this statusJQL: 3.4status WAS \"To Do\" ON (-24h)Search for issues that were in status “To Do” 24 hours ago (although they can have a different status now)JQL: 3.5status = \"To Do\" and component IN componentsLeadByUser(jsmith)Jira Data Center and Server only: show me all open issues from these projects where the username jsmith is a component leadJQL: 3.6status = New and component IN componentsLeadByUser(5c7074dc017b4a53c68aae8f)Jira Cloud: show me all open issues from these projects where the user jsmith is a component leadJQL: 3.7statusCategory = Done AND resolution IN (Done, \"Won't Do\")Search for issues that are in any of statuses of the Done category (the category is selected is more universal than selecting a specific status) and the resolution type belongs to one of two listed resolution typesIssue Fields: LinksJQL: 3.8parent = DMP-120Search for all subtasks of a particular issue by the parent keyJQL: 3.9parent IN (DMP-85, DMP-80)Search for all subtasks of more than one parent issuesJQL: 3.10issueLink IN (DMP-23, DMP-24)Find all issues linked to at least one of the listed issuesJQL: 3.11issueLink IN (DMP-23, DMP-24) AND issueLinkType = \"relates to\"Find all issues linked to at least one of the listed issues but only with a specific link typeJQL: 3.12issue IN linkedIssues(\"DMP-89\", \"is blocked by\")Search for issues linked only by the link type “is blocked by” to issue DMP-89JQL: 3.13\"Epic Link\" IN (DMP-79, DMP-58)Show all stories (or tasks) linked with an Epic by the Epic link relationJQL: 3.14\"Epic Link\" = \"Jupiter One\"Find issues that belong to the epic “Jupiter One”. You do not have to use the issue key ID in order for this query to work because the Epic Name will be sufficientJQL: 3.15\"Epic link\" = ANS-31Find issues that are linked with a single Epic, which has the key ANS-31JQL: 3.16issueLinkType = \"is blocked by\" ORDER BY RankFind all issues that are blocked by other issues so their progress is not possible and sort them by Rank (so they can be sorted visually on the Kanban or Scrum board later)Issue Field: ResolutionJQL: 3.17resolution is not EMPTY ORDER BY priority DESC, assignee ASCDisplay all unresolved issues sorted by two other fields - priority and assignee. It is good to know that the query resolution = Unresolved will give the same resultsJQL: 3.18resolution is EMPTY AND assignee = currentUser() AND due &lt;= EndOfWeek(1)Your personal to-do list till the end of this week.Find all unresolved issues where I am assigned to and which are due by the end of next week (it depends on Jira configuration which day is the last week day)JQL: 3.19resolution CHANGED TO Done BY currentUser() DURING (startOfMonth(-1), endOfMonth(-1))Show to the current user all issues resolved as Done during the previous month. It is a very useful query for the reporting and statistics purposes. If your status consists of two or more words, then you need to put them in quotation marks like this: “To be done”The operator DURING sets a past date range for this query. The functions startOf() and endOf() will calculate the proper dates. You could also use here startOfYear() and endOfYear() hereJQL: 3.20resolution = Done AND resolutiondate &lt;-5dShow all issues resolved as Done which have been resolved for more than 5 days. When you use the AND operator, all the criteria must be met for the query to return resultsJQL: 3.21resolution WAS Done BY currentUser() DURING (startOfYear(), endOfYear())The BY operator limits this query to a specific user in the past. In this query you will see issues that at any point in time this year were resolved as Done by a current logged-in user. It will also show these which are now still resolved as Done as well as these which some time in the past were resolved but now are re-opened. If you further limit this query with AND resolution != Done, then this can help you find issues that were reopened.Issue Field: ProjectJQL: 3.22project = DMP AND issuetype IN standardIssueTypes()Search for all standard issue types. These are Epics and Tasks, but not sub-tasks. Use this query if you have more types of sub-tasks and want to exclude them from the results.JQL: 3.23project = DMP AND issuetype IN subTaskIssueTypes()Search for all sub-task issue types in one project with the key DMPJQL: 3.24project IN projectsWhereUserHasPermission(\"Resolve Issues\")This advanced query can be used in Jira Workflow JQL conditions (you will need a plugin for that e.g. Script Runner). When used, a transition will be only visible to those who can resolve issues. You can expand it with further narrowing clauses.JQL: 3.25category = \"Agile\" OR category = \"Classic\"Search for issues that belong to projects in either of two categories - “Agile” or “Classic”. This makes the query easier to build and maintain if you want to track issues from a few projects at the same time. In this query it is not necessary to put all project names one by one therefore this query is more universal for new projects that may be created in the future. This query will return results if you satisfy any of the given criteria.JQL: 3.26issuetype IN standardIssueTypes() AND issuetype IN subtaskIssueTypes()Select all issues except Epics. The operator AND narrows the search resultsOther frequently used fieldsJQL: 3.27priority WAS Highest AFTER startOfWeek()Display all issues where the priority was or still is set to “Highest” from the beginning of the week till nowJQL: 3.28priority CHANGED BEFORE endOfWeek(-1) AFTER startOfWeek(-1)Search for issues which had priorities changed in the last weekJQL: 3.29reporter = currentUser() AND attachments IS EMPTYDisplay all issues reported by current user where he/she forgot to attach attachmentsJQL: 3.30issue IN watchedIssues() and assignee != currentUser()Show all issues that the current user is watching and where that user is not an assigneeJQL: 3.31watcher = currentUser() AND watchers &gt;= 5Search for issues where the user executing the query is watching and where there are 5 or more watchersJQL: 3.32project = DAM AND level = internalSearch for issues in project DAM where the issue security level is set to ‘internal’. It is worth knowing that the field Security level visible on the issue screen is called level in search view columns.Other queriesJQL: 3.33filter = \"My Team Filter\" and assignee = currentUser()From the results of the filter “My Team Filter”, show only the issues assigned to the current userJQL: 3.34issueType = Task AND workRatio &gt; 60Select all issues of type Task where over 60% of the original estimate has been logged. This is a very useful query if you want to track budget spending. You can also display the column workRatio in filters" }, { "title": "Jira JQL - searching Issue History", "url": "/posts/jql-search-history/", "categories": "JQL", "tags": "jql-cookbook, jql", "date": "2023-12-25 08:00:00 +0100", "snippet": "There is a list of parameters that are available for operators involving time and history of changes. Below is the list of these parameters and you will see them in practical examples in chapters that follow. ON, BEFORE, AFTER – to be used with a specific date DURING – to be used with a date range from the past e.g. DURING(2020-09-01, 2020-09-20) BY – to be used with a username to limit results to a specific user in the past value CHANGED FROM TO – to check how the value of assignee or status changed in issue history CHANGED BY – to check if an issue was changed by a specific userThe table below summarises operators and how they work.JQL Operator “WAS” Parameter Explanation Operator WAS WAS NOT WAS IN WAS NOT IN Explanation Finds issues that currently have or previously had values Used only in fields Assignee, Fix Version, Priority, Reporter, Status, Resolution Accepts these parameters AFTER \"date\" BEFORE \"date\" BY \"username\" - set by what user DURING (\"date1\",\"date2\") ON \"date\" JQL Operator “CHANGED” Parameter Explanation Operator CHANGED Explanation Finds issues where a value changed Used only in fields Assignee, Fix Version, Priority, Reporter, Status, Resolution Accepts these parameters AFTER \"date\" BEFORE \"date\" BY \"username\" - set by what user DURING (\"date1\",\"date2\") ON \"date\" FROM \"old_value\" TO \"new_value\" " }, { "title": "Tricky JQL questions for ACP Exam candiates", "url": "/posts/jql-tricky-jql-questions/", "categories": "JQL", "tags": "acp, jql", "date": "2022-12-26 08:00:00 +0100", "snippet": "IntroductionBelow you will find 10 rather difficult examples of how the Atlassian Certified Professional Exam questions may look like. Below the questions there are answers with detailed explanations.Please note: These questions are only simulations and are not taken from any real ACP exam papers.QuestionsQuestion 1User John contacted you about a problem with his Teamwork dashboard. His login in Jira is ‘john.doe’. On this dashboard John can see a gadget ‘Filter Results’ based on the following JQL query:project = TRE and resolution = DoneJohn reports to you that he cannot see any issues in the gadget but all his team members, when they use the same dashboard, can see 5 tasks.What is the cause of this problem?A. John has no access to the gadget and one of his team members should share the entire dashboard with John so the gadget will be visibleB. John should copy the dashboard, save his private version, and then update the query to see the issues:project = TRE and resolution = Done and assignee = john.doeC.\tJohn does not have the ‘Browse Projects’ permission in project TRED. \tJohn should request help from Jira Administrator who should enable the dashboard for him Question 2Inspect the JQL query shown below:project = DBRA AND updatedDate &gt; startOfDay(-1) AND updatedDate &lt; endOfDay(-1) OR updated &lt; endOfDay()What will be the outcome of this query?A. The outcome will be an error. There is no updatedDate field in JiraB. The outcome will be all issues from project DBRA that were updated todayC. The outcome will be all issues from project DBRA updated yesterday (the last 24 hours)D. The outcome will be all issues in this Jira instanceQuestion 3Jenny wanted to create the simplest possible JQL query which she can use to list all the tasks that she needs to do by Friday every week. She would like to share this query with other team members belonging to group Developers (jira-team-developers) so they can use it for their tasks list as well.Which JQL query satisfies her requirements?A.\tstatus = \"To Do\" AND assignee = \"jenny.smith\" AND due &lt;= EndOfWeek()B.\tassignee = currentUser() AND resolution is NULL AND due &lt;= EndOfWeek()C.\tstatusCategory = \"To Do\" AND assignee = \"jenny.smith\" AND due &lt;= EndOfWeek(1w)D.\tstatusCategory = \"To Do\" AND assignee = currentUser AND assignee in membersOf (\"jira-team-developers\" AND due &lt;= EndOfWeek()Question 4A user requested you to help her in creating a filter for her team’s dashboard, to be used in one of dashboard’s gadgets. Her team is participating in a few projects categorized as software – the Jira project keys as follows (ABA, ABB, ABC, ABD, ABF, BDA).This user would like to see all issues that were rejected by the Quality Assurance Team last week and which did not change its status since then. This JQL needs to be as simple as possible.Which JQL query would you recommend to this user?A.\tproject IN (ABA, ABB, ABC, ABD, ABF, BDA) AND status = Rejected BEFORE EndOfWeek(-1)B.\tproject IN (ABA, ABB, ABC, ABD, ABF, BDA) AND status CHANGED TO Rejected DURING (startOfWeek(-1), endOfWeek(-1)) AND status = RejectedC.\tcategory = \"software\" AND status CHANGED TO Rejected DURING (startOfWeek(-1), endOfWeek(-1)) AND status = RejectedD.\tcategory = \"software\" AND status CHANGED TO Rejected DURING (startOfWeek(-1), endOfWeek(-1))Question 5A user Mel Smith (username: mel.smith) works in one Jira project called “TEMPS”.Mel needs a JQL saved filter which should help her team members in their work. She wants to list issues that meet the requirements which are listed below: Issues were assigned to a viewing user but now are assigned to somebody else Issues that were created by a user executing the queryWhich JQL query will satisfy Mel’s requirements?A.\tassignee WAS currentUser() AND assignee != currentUser() AND created = currentUser() AND project = TEMPSB.\tassignee NOT IN currentUser() AND assignee != currentUser() AND creator = mel.smithC.\tassignee != currentUser() AND assignee WAS currentUser() AND creator IS NOT currentUser()D.\tproject = TEMPS AND assignee WAS currentUser() AND assignee != currentUser() AND creator = currentUser()Question 6Betty created a JQL query which she shares with her team located in London and Chicago:project = DBA AND type = Story AND created &gt;= startOfDay() AND status = resolvedWhat can you say about his JQL query?A. This query is overcomplicated and should be simplifiedB. This query will give different results depending on user profile settingsC. This query contains the keyword ‘type’ which is a reserved operator in Jira.D. Status names should be in quotation marksQuestion 7In your Jira instance, there is a custom field, type label, called ‘Variables’.A user has requested from you a new JQL query with the following requirement: “I would like to see all unassigned issues from a filter “TEMPUS” which my team is using, where the ‘Variables’ field value equals: Ready. Unfortunately, due to bad Jira administration practices, there is another custom field called Variables and you need to avoid selecting the wrong custom field.”Which JQL query will return the needed results:A.\tfilterName = TEMPUS AND status = Unassigned AND Variables = ReadyB.\tfilter = TEMPUS AND status = Unassigned AND cf[10240] = ReadyC.\tfilterName = \"TEMPUS\" AND assignee IS NULL AND \"Variables\" = ReadyD.\tfilter = \"TEMPUS\" AND assignee IS EMPTY AND cf[10240] = ReadyE.\tfilter = TEMPUS AND assignee = Unassigned AND cf[10240] = ReadyQuestion 8Two project managers with their user id: “jwollar” and “ewartes” want to be notified once every week about issues they are watching in Jira, where their name is mentioned in comments. They only want to know about the issues where they have access to these issues.How will you satisfy this requirement?A.\tUse JQL:watcher = currentUser() AND comment ~ currentUser()and create a shared filter to which each project manager can subscribe toB.\tUse JQL:projects in projectsWhereUserHasPermission(\"Browse Projects\") AND watcher in (jwollar, ewartes)C.\tUse JQL:project in projectsWhereUserHasPermission(\"Browse Issues\") AND watcher ~ currentUser() AND comment ~ currentUser()and create a shared filter to which each project manager can subscribe toD.\tUse JQL:project in projectsWhereUserHasPermission(\"Browse Issues\") AND watcher = currentUser() AND currentUser() IN comments and create a shared filter to which each project manager can subscribe toQuestion 9Rebeca is a software developer who works in Jira Software. She wants to create a private filter where she will see all her overdue issues, which she cannot complete because they are blocked by others.Select the JQL query which satisfies this requirement.A.\tprojectCategory = \"software\" AND due &lt; startOfDay() AND status = BlockedB.\tdue &lt; startOfDay() AND resolution = Unresolved AND issueLinkType = \"is blocked by\"C.\tcategory = \"software\" AND due &lt; startOfDay() AND resolution = UnresolvedD.\tcategory = software AND due &lt; startOfDay() AND issueLinkType = \"is blocked by\"Question 10Out of 5 JQL queries below, only one is correct. Identify this query.A.\tduedate &lt; endOfMonth(\"+1q\")B.\tassignee in membersOf(\"dev-group\",\"ops-group\")C.\tissue in issueHistory() AND issuetype IN standardIssueTypes()D.\tproject = WORK AND project = TESTE.\tsummary = \"Task for Jenny\"AnswersAnswer (1):A is not correct. Sharing the dashboard with John is not needed. He has access to the dashboard but cannot see the tasks.B is not correct. Creating the dashboard with this JQL will not helpC is correct. Browse permission is needed to see tasks from a project in Jira.D is not correct. There is no such thing in Jira as enabling the dashboard.Answer (2):A is not correct – ‘updatedDate’ is an alias name for field ‘updated’. This query will not produce and errorB is not correctC is not correct. This would have been correct without the second part of the query, after the OR operatorD is correct. The query part after the operator OR is responsible for listing all Jira issues. In this case the first part of the query joined by the operators ‘AND’ does not influence the JQL outcome.Answer (3):A is not correct. The results will be limited only to one status name and one user. There can be many other statuses in other workflows and other team members will not see their issues.B is correct. This is the most simple and universal JQL to get a list of tasks that are due by the end of current Week. You can use NULL and EMPTY interchangeably.C is not correct. StatusCategory will not show the tasks that are already in progress. Also, the function EndOfWeek(1w) shows the Saturday next week. Apart from that, limiting the assignee to one person does not satisfy the requirements D is not correct. ‘MembersOf’ is not needed and the ‘currentUser’ does not have the needed bracketsAnswer (4):A is not correct. You cannot use the predicate BEFORE in this wayB is not correct. The JQL query will work and will give the desired results. However, it is not as simple as possible and is not flexible. If a new project is added to category ‘software’, this query will not list the issues from this new projectC is correct. It uses the project field ‘category’ and is therefore simplified and adaptive.D is not correct. This query will show all issues that changed to status Rejected but may not be in this status anymore. The requirement says about issues which still remain in the ‘Rejected’ status.Answer (5):A is not correct. The field “created” is about the time dimension and not usersB is not correct. Operators NOT IN cannot be used to limit users in field assigneeC is not correct. Operators NOT IN cannot be used to limit users in field creatorD is correct. Every time you know that it will not limit your results, you should put the project name(s) in the JQL queryAnswer (6):A is incorrect. This query cannot be further simplified because every segment relates to a different dimension of dataB is correct. Calendar functions like endOfDay() always consider the time zone of the viewing user. Time zone is an individual user setting configured in the user profile. In this case there is a time zone difference between offices in London and Chicago so query results may differ.C is incorrect. Keyword ‘type’ is an alias to keyword ‘issuetype’ and can be used interchangeably.D is incorrect. Status names containing only one word do not have to be in quotation marksAnswer (7)A is incorrect. The field name “filterName” does not existB is incorrect. You cannot use statement: status = Unassigned to find unassigned issues (i.e. issues with no assignee)C is incorrect. You cannot use the Custom Field name, if there are more than one fields with that name in the Jira instance.D is correct. Quotation marks in the filter name are optional if there is only one word usedE is incorrect. You cannot use the equals:= operator to find the unassigned issuesAnswer (8)A is correct. You do not need to check the ‘Browse Projects’ permission because filter results always show only issues to which a user has access. Project permissions and Issue security may limit the number of issues that are listed in filtersB is incorrect. You cannot use the field ‘Watcher’ with the operator IN. C is incorrect. You cannot use the field Watcher with the operator CONTAINS:~. Permission ‘Browse Issues’ does not exist in Jira.D is incorrect. You do not need to check the ‘Browse Projects’ permission because filter results always show only issues to which user has access. You cannot use the function currentUser() with the operator IN. Field ‘comments’ does not exist in Jira.Answer (9)A is incorrect. This query will produce an error – there is no field projectCategory in JiraB is correct. This query contains the minimum necessary elements to see Rebeca’s blocked and uncomplete (unresolved) issues which are overdue on the day when the query is being run.C is incorrect. Using the field ‘category’ is not necessary and may limit the query results. Also, issue type linking is missing.D is incorrect. This query will show all overdue issues which are unresolved and resolved.Answer (10)A is incorrect. The calendar function endOfMonth() does not support the parameter ‘q’B is incorrect. The user related function membersOf() supports only one parameter. To include two groups, you should write two clauses and combine them with a keyword ‘OR’C is correct. These are valid functions but less frequently usedD is incorrect. An issue cannot belong to two projects at the same time. The keyword ‘AND’ is incorrect.E is incorrect. You cannot use the operator -&gt; equals:= in this query but you should rather use the operator -&gt; contains:~" }, { "title": "Jira Server/DC Date/Time Settings", "url": "/posts/jira-server-settings/", "categories": "SYSTEM", "tags": "jira-system-configuration", "date": "2022-09-28 09:00:00 +0200", "snippet": "Changing the Date/Time display in JiraIf you want to change how the date and time is displayed in Jira Server/DC, there are two places where you need to configure settings:General configurationThe date or date/time formats for date pickers are defined by a pair of properties (one for Java and the other for JavaScript). The two properties in this Java/JavaScript pair must match in order for the date (or date/time) picker they define to function correctly.Menu:Jira Administration/System/General configuration/Advanced settingsSettingsjira.date.picker.java.formatdd/MM/yyyyjira.date.picker.javascript.format%d/%m/%Yjira.date.time.picker.java.formatdd/MM/yyyy HH:mmjira.date.time.picker.javascript.format%d/%m/%Y $H:%MJira System General configurationLook and feel configurationDate/Time Formats configuration options on the Look and Feel page, which only customize JIRA’s presentation of times and dates to users.Time FormatHH:mmDay FormatEEEE HH:mmComplete Date/Time Formatdd/MM/yyyy HH:mmDay/Month/Year Formatdd/MM/yyyyUse ISO8601 standard in Date PickerYesLook and feel configurationDocumentationChanging the Due Date Input Format" }, { "title": "Tricky JQL queries for ACP Exam candiates", "url": "/posts/jql-tricky-queries/", "categories": "JQL", "tags": "acp, jql", "date": "2022-09-16 09:00:00 +0200", "snippet": "When preparing for one of the ACP exams, it is worth reviewing your knowledge by evaluating what you already know. This will boost your confidence when you get an ‘out-of-the-blue’ JQL related question.Tricky JQL queriesIt is probable that on your ACP exam you will get a similar question like “Is this JQL correct?” or “Will this JQL give results or an error?” Review the queries below and be prepared for surprises.due &gt;= \"0\"You can use 0 as the equivalent to function now(). You can put any value in the quote-marks and it will work just fine. Example: due &gt;= “-1000d”duedate &lt; endOfWeek(-1)Although you may think that endOfWeek is always in the future (oh yes, weekend), this may not always be true in Jira. This query will show you all the issues that had their due date before (this is tricky) this week started. If I said “before the end of previous week” this would be too obvious.assignee not IN (NULL, currentUser())If you think using NULL is not allowed in JQL queries you are wrong. You can use NULL and EMPTY interchangably.assignee IN membersOf (\"jira-administrators\",\"jira-software-users\")Use groups to make JQL queries more adaptable to rotation of team members. When someone leaves or joins the company, the query will still work for current and new team members.status changed to 10001In some cases (eg. in ScriptRunner scripts) it is better to use object id’s and not names. Especially in larger Jira instances, due to various reason names of statuses, resolutions or custom fields can be spelled exactly the same. In this example, you are looking for issues which were transitioned from any status to status “Done”.cf[10011] ~ \"preparation\"This query will return all issues where a custom field Epic Name contains the word “preparation”. Some fields that are by default in Jira are not treated as system fields. Epic Name field is one of them.project in projectsWhereUserHasPermission(\"Assign Issues\")project in projectsWhereUserHasRole(\"Developers\")This query will help you find issues in these projects, where you have specific permission or role in projects. You can also use it to check if you have permission or role in specific projects where you do not have administration rights. Example: project in projectsWhereUserHasRole(“Developers”) AND project = ABC. In this example, if you see issues this means that you have a role Developers in project ABC.issuekey IN updatedBy(jsmith)Find issues that were updated by user id jsmithissuekey IN updatedBy(jsmith, \"-8d\")Find issues that were updated by John Smith within the last 8 daysissuekey IN updatedBy(jsmith, \"2022/06/01\", \"2022/08/31\")Find issues updated between June and September 2022Using Keywords ‘AND’, ‘OR’ and Parantheses.If you use both ‘AND’ as well as ‘OR’ in the same query to join two clauses, then the clauses connected with the ‘AND’ will be treated as one group or unit.status = Open OR status = “In Progress” AND assignee = bcollinsThis query will return: Clause 1) all issues where the status is OpenClause 2) all issues in status In Progress assigned to user BCollins.The keyword OR means here ‘give me these results or these results’. You can’t use the keyword AND here, because an issue cannot be in status Open AND in status “In Progress” at the same time.However, if you use Parentheses, the same query will work differently.Have a look at another example below and pay special attention where the parentheses are inserted:(status = Open OR status = “In Progress”) AND assignee = bcollins This query will return:Clause 1) in parentheses – select all issues in status Open OR In ProgressClause 2) AND issues need to be assigned to bcollins" }, { "title": "Jira JQL Best Practices for ACP Exam Candidates", "url": "/posts/jql-best-practices/", "categories": "JQL", "tags": "acp, jql", "date": "2022-09-09 09:00:00 +0200", "snippet": "When preparing for one of the Jira related ACP exams, for example ACP-100 or ACP-120, you should expect a few questions relating to JQL. In ACP-100 preparation topics you can find - Topic 1: Advanced User Features; 1.1: Given a business requirement, create, translate, critique, and optimize JQL queries.Although you may work with JQL on a daily basis, some questions are really tricky and require more time to analyze. Do not underestimate these questions. Sometimes, even if you answer them correctly, you are not always 100% sure about that.If you want an ACP Exam-hack from me, memorize this JQL Golden Best Practice: Ask yourself:Is this JQL query easy to maintain?Will anybody have to modify it when some external conditions or data change?If no - that is ok, if yes - optimize it.It does not mean that it is always possible to optimize a JQL query, because not every query needs to be shared (in shared filters or dashboards). But on the ACP Exam, expect to select only this query which does not need to be updated once created.Here are a few examples to illustrate it:(1) Do not use individual user names, if you want to share the filter with othersJQL: reporter in membersOf(\"dev-ops-members\") When someone is added or removed from this group, this JQL will continue to work just fine, no need to update itJQL: assignee = currentUser()If you want to share a dashboard which should work the same way for everyone, use the group or user related functions and not individual values(2) Do not list all the task or sub-task issue types in one query, if you do not want to select only a few of themJQL: project = ABC and standardIssueTypes()This will select all task type issues, but not sub-tasks. Tricky question: will this also select Epics? Check it out yourself.JQL: project = ABC and subTaskIssueTypes()This will select all sub-task type issues, but not tasks and epics(3) In your Jira, if you create many new projects reqularly, configure project categories and use them in your JQL queriesJQL: category = “agile” and status = OpenThis will list all issues in status Open from all projects, current and future, associated with the category “agile”I hope you found these examples useful and this will bring you one step closer to your ACP Exam success.If you want to learn 100 more JQL examples, please consider purchasing my e-book, which helps Atlassian ACP Exam candiates and Jira Users to master JQL language." }, { "title": "Workflow transition properties", "url": "/posts/jira-workflow-transition-properties/", "categories": "WORKFLOWS", "tags": "workflow-properties", "date": "2022-09-08 09:00:00 +0200", "snippet": "Two must-have workflow propertiesGo to Jira Administration / Issues / Workflows, edit the selected workflow. Select the resolving transition and edit its properties.Click on the transition to see optionsLimit the list of available resolutions on the transtion screenjira.field.resolution.includeProperty value: 10000,10004,10100Workflow buttons sequenceThe lower the number, it will be closer to the left.The higher the number, it will be closer to the rightopsbar-sequenceProperty value: 10,20,30,40" }, { "title": "Scripted JQL - Linked Issues", "url": "/posts/scripted-jql-links/", "categories": "JQL", "tags": "scripted-jql, jql", "date": "2022-06-14 09:00:00 +0200", "snippet": "General Linking - hasLinkType()Find issues that have ANY linked issuesissueFunction in hasLinks()Find issues that have a specific link (they are linked with an inward or outward link)issueFunction in hasLinks(\"is duplicated by\")This is a generic JQL query which does the same thing only for one ticket. issue in linkedIssues(ABC-123,\"is duplicated by\") Find issues that are linked to a particular issue via a particular type of linkGeneral Linking - hasLinkType()If you want to use the Link Name, use the function hasLinkType()Find all issues which use a specific Link Name eg.’Duplicate’‘Duplicate’ is the Name of the link and not its outward/inward link description.Review Issue Linking names in Jira Administration.issueFunction in hasLinkType(Duplicate)Find all issues which use a specific Link Name with more than one word - ‘Parent Child Link’.issueFunction in hasLinkType(\"Parent Child Link\")If you want to use the outward/inward link description, then use function hasLinks().Below are two examples which have equivalent result: issueFunction in hasLinkType(\"Duplicate\")issueFunction in hasLinks(\"duplicates\") OR issueFunction in hasLinks(\"is duplicated by\")Find issues with more than 2 ‘blocks’ outward linksissueFunction in hasLinks(\"blocks\", \"+2\")Selecting specific issues which are linked - linkedIssuesOf()TemplateissueFunction in linkedIssuesOf(Subquery, link_type)ExamplesFind issues linked by any link type, which are in status ‘In Progress’.issueFunction in linkedIssuesOf(\"status='In Progress'\")Find issues linked by an outward link ‘clones’ and these issues are in status ‘To Do’.issueFunction in linkedIssuesOf(\"status='To Do'\", \"clones\")Selecting specific issues linked with EpicsFind all issues linked by any type of regular link and including Epics Links and Subtask links for a specific subquery relating to tasks.As a result you will get issues matched by the subquery, including linked Epics and Sub-tasks.issueFunction in linkedIssuesOfAll(\"Key = DOR-15300\")issueFunction in linkedIssuesOfAll(\"project=IDP\")You can save the query as named filter and use its name.issueFunction in linkedIssuesOf(\"filter = 'DRMA: All Open Tasks'\")Find linked issues with whatever link to this specific issue SBM-600.issueFunction in linkedIssuesOf(\"SBM-600\")Find linked issues with link type ‘clones’ to specific issue.issueFunction in linkedIssuesOf(\"SBM-7026\", clones)Recursive LinkingOne Level belowRecursively - return all issues that are linked both directly and indirectly to the results of the initial queryTemplateFind all issues issues that are linked both directly and indirectly to the results of the initial query - top level. issueFunction in linkedIssuesOfRecursive (Subquery)ExampleFind all issues linked the result of the initial query (“key=JIRA-1”) that link back to the issues in the query, including blocks links, duplicates, clones, and more.issueFunction in linkedIssuesOfRecursive (\"key = JIRA-1\")ExampleFind all issues linked directly with the Change BundleissueFunction in linkedIssuesOfRecursive(\"issue =SBM-7043\")All levels belowFind all issues including subtasks and epic links that are linked directly and indirectly to the results of the initial query.ExampleFind all linked issue to this Change BundleissueFunction in linkedIssuesOfAllRecursive(\"issue =SBM-7043\")Result: will show Epics and tasks linked with these Epics, with no link type specifiedEpic SubqueriesFind all issues linked with a specific set of issues. The names of links are not important. It will find linked issues to issues matched by the subquery.ExampleFind all issues linked with an issue Epic.issueFunction in linkedIssuesOf(\"issuetype = Epic\")Show me issues linked with Epic, using the link name ‘Change Bundle’ having specific ComponentissueFunction in linkedIssuesOf(\"issuetype = Epic\", \"Change Bundle\") and Component = ZERT_VETemplateFind Epics with stories meeting the subquery criteria.issueFunction in epicsOf (Subquery)ExampleFind Epics for stories selected in the query. issueFunction in epicsOf(\"project = ABC AND issuetype=Task\")Find Epics with unresolved stories in project MobileissueFunction in epicsOf (\"resolution = empty and project = Mobile\")TemplateFind stories in Epics meeting the subquery criteria.issueFunction in issuesInEpics (Subquery)ExampleissueFunction in issuesInEpics (\"project=ABC and status = 'In Progress'\")Find all issues/stories which have Epics in status ‘In Progress’ in project ABCissueFunction in issuesInEpics(\"resolution is not empty\")Find all issues/stories in resolved EpicsSub-task SubqueriesTemplateShow me all issues with sub-tasksissueFunction in hasSubtasks()ExamplesShow me sub-tasks of issues specified by a subquery.In this example: all sub-tasks of all issues from project ABCissueFunction in subtasksOf(\"project = ABC\")Show me sub-tasks in status “Done” of parent issues with resolution EmptyissueFunction in subtasksOf(\"resolution IS EMPTY\") AND status = DoneShow me subtasks of the following filter resultsissuefunction in subtasksOf(\"filter = 'Stories in Epic'\")Show me subtasks found by a subqueryissueFunction in subtasksOf(\"project = IDP AND issuetype=Incident\")Parent issues findingStories and sub-tasks in an Epic:parentEpic = Demo-123As a result you will get Issues AND Sub-tasks in epic Demo-123Get the parents of subtasks found by a subqueryissueFunction in parentsOf(\"project=IDP and issuetype=Incident\")Show me parents of sub-tasks from project ABC which are in status OpenissueFunction in parentsOf(\"project = ABC AND status = Open\")Show me parent issues of unresolved sub-tasks where I am an assigneeissueFunction in parentsOf(\"Resolution IS EMPTY and Assignee = currentUser()\")JQL function for PortfolioGet a list of sub-tasks for a specific parent.issue in childIssuesOf(\"DOR-12962\")As a result I will see all children issuesGet a list of ALL parents for a specific subtask.issue in parentIssuesOf(\"DOR-18800\")As a result I will see all parents - issue and epicAdvanced: Linked Parents-Children findingFind all issues linked with a specific set of issues and also linked with a specific link type.Link Name: Change BundleOutward description: change sheetsInward description: bundled inIn this example I want to see all issues linked to “Change Sheet” using inward link type ‘bundled in’.Source: Change Sheet, Destination: linked issues by link name ‘bundled in’I will get a list o parents of selected Change Sheets.issueFunction in linkedIssuesOf(\"issuetype = 'Change Sheet'\", 'bundled in')As a result I will see all Change Bundles (parents)Another extended version with sub-queryissueFunction in linkedIssuesOf(\"project = DOR and type = EPIC and 'Control Unit' is EMPTY\", 'Change Bundle')This will show you all Change Bundles for linked issues (Epics in this example) which do not have any value in custom field Control Unit.In the opposite direction, a list of children - change sheets linked with any Change Bundles.issueFunction in linkedIssuesOf(\"issuetype = 'Change Bundle'\", 'change sheets')Sources: https://www.adaptavist.com/blog/top-10-most-commonly-used-jira-query-language-functions https://blog.valiantys.com/en/expert-tips/jql/ https://confluence.atlassian.com/jiraportfolioserver0211/searching-for-issues-using-portfolio-details-945537693.html" }, { "title": "ASB-214 Confluence Permissions Pro Skills Notes", "url": "/posts/asb-214-confluence-permissions/", "categories": "CONFLUENCE", "tags": "badge, acp", "date": "2022-01-09 08:00:00 +0100", "snippet": "Configuring and Troubleshooting Permissions in Confluence: SkillbuilderFree course notesPermission levels: global space: space-by-space content: page-by-pageGlobal permissions can be added to users and groupsGlobal permissions system administrator confluence administrator can use Confluence create spaces personal spaceDefault groups: confluence-administrators (the superuser group) superuser group, access all content permissions to this group cannot be modified you cannot delete this group they have system administrator and confluence administrator global permission confluence-users created when Confluence is installed possible to delete this group you will not be able to add new users if deleted Global permissions: can-use (Use Confluence) can log-in (always, even without this permission) counts toward license count needed to access any content it is a pre-requisite to access spaces you can see all the users with this permission via profile and directory you can interact with other users can-use permission and anonymous users needed to be able to access confluence at all view user profiles can be used to allow or limit interaction with other users does not consume a license seat do not have to log in can access content and spaces based on space permissions without a can-use global permission, you cannot add a space permission to anonymous Space permissions such as Restrictions Add/Delete and Space Admin cannot be given to Anonymous users - it is blocked and cannot be changed By mistake, you can give permissions to Export a space When a page or content is added to space by anonymous, the author will be Anonymous View user profiles with this permission, a user can (at)mention other users without this permission, at mention is only possible with the user who created the page while commenting or editing. Other global permissions Confluence Administrator permission can administer the application but is disallowed from operations that may compromise system security. can create groups can add users to groups can manage global permissions cannot manage or add users the confluence-administrators group cannot grant system administration permission System Administrator permission Has complete control and access to all administrative functions. can manage and add users to the confluence-administrators super-group grant system administration permission to others Membership in the confluence-administrators group will give you more permissions than if you had both system administrator and confluence administrator permissions. being a member of this group you will not need space-level and page content-level permissions to be able to access them users with the confluence administrators global permission still need space permissions and page access Space related global permissions Personal space Able to create a personal space for their profile. Create space Able to add spaces to the site. Space-level permissions All section - view/delete view - users can access a space delete - delete own content even if others have edited it Add - add pages, blogs, attachments and comments Delete - delete pages, blogs, attachments and comments Delete Mail - users can delete mail items archived in the space (related to the Confluence Mail Archiving Plugin) - retrieve, store and browse email within a Confluence space Space Admin - users can administer the space all aspects Space Export - can export the space as XML, HTML or PDF. Without the View permission to certain pages, these pages will not be exported Restrictions Add/delete - add or delete restrictions to pages or blogs Space permissions and page restrictions affect how links between Confluence pages are displayed. If someone doesn’t have ‘View’ space permission, links to pages in that space won’t be shown at all. If someone has the “View” space permission, but the page has view restrictions, the link will be visible but they’ll get an “access denied” message when they click the link. Links to attachments - if the visitor doesn’t have permission to view the page the attachment lives on, the link won’t be rendered. Content Restrictions Inheritance view restrictions are inherited edit restrictions are NOT inherited Moving Pages permissionsTo move a page, you need the following permissions: ‘Add’ permission on the page you’re moving, ‘View’ permission on the page’s parent page. If you’re moving the page to a different parent, you need ‘View’ permission on the new parent.To move a page into a different space, you also need: ‘Delete’ permission on the space you’re moving from, and ‘Add’ permission on the space you’re moving to.If the page has restrictions, and you want to keep the page restrictions in the new location you need ‘Restrict’ permission on the space you’re moving to. Alternatively, remove the page restrictions before performing the move.Links visibilitySpace permissions and page restrictions affect how links between Confluence pages are displayed.If someone doesn’t have ‘View’ space permission: links to pages in that space will be visible, they’ll get a “page not found” message the space key is not revealed in the link URL.If someone has the “View” space permission, but the page has view restrictions the link will be visible they’ll get an “access denied” message when they click the link.Links to attachments are also affected.If the visitor doesn’t have permission to view the page the attachment lives on, the link won’t be rendered.To link to a Confluence page from outside Confluence: use the share link which is a permanent URL this ensures that the link to the page is not broken if the page name changes." }, { "title": "ASB-212 Confluence Documentation Pro Skills Notes", "url": "/posts/asb-212-confluence-documentation-badge/", "categories": "CONFLUENCE", "tags": "badge, acp", "date": "2022-01-08 08:00:00 +0100", "snippet": "Using Confluence for Documentation &amp; Knowledge Bases: SkillbuilderUsing Confluence to build documentation spaceGood documentation space: self-explanatory, no user-guide needed searchable easy to read, well designed, well presented targeted at your audience - meet their needs well maintained - no scroll intensive, difficult to understandConsider the audience before you startPage hierarchy no more than 4-5 layers - more will be difficult to findDo not create too many spacesReuse existing space when possibleTo create a space you need a global permission ‘create space’To make content easy to find: reduce the amount of content on one page move information to the first hierarchy level avoid the need to scrolling TLDR - too long did not readTemplates and BlueprintsConfluence has: documentation space blueprints page level blueprints: how to articles and troubleshooting articles templates which you can generate yourselfYou can change the blueprint and the template content on a space level (space administrator) or for the whole confluence (confluence administrator).Space settingsMake sure that the space key does not have to be changed.It is not easy to change the space key.You can give the space a category. They group the spaces in a catalog.Page level permissions: can view can view and edit has no accessPage permissions marked by the red lockSpace level permissions are much more granular.Delete permission should be given only to certain people.Deleted content can be retrieved but it is an overhead.Making a Space publicly accessibleMaking Space externally accessible is difficult from the security point of view.Giving the access: Go to Confluence Administration and edit global permissions Check ‘can use’ for anonymous access In the context of documentation/knowledge base, giving the permission ‘view user profiles’ is not desirable. In space, go to permissions and to Anonymous access section Decide which permissions you want to give, most likely only the View permission You can’t grant ‘space admin’ and ‘restrict’ permissions to anonymous usersLinks between Confluence and Service Desk relieve pressure on your support team create a self service support system identify gaps in documentation identify gaps in functionalityExporting Content Single Page export - only published content is exported Space Export   PDF Export XML Export HTML export Pages Yes Yes Yes Blogs No Yes No Comments No Option Option Attachments Images Yes Yes Unpublished Changes No Yes No Restricted pages When you can view Yes, restricted too When you can view Trash No Yes No Download as PDF ZIP ZIP Team Calendars No No No PDF Export - Generates a PDF file for each page in this space, excluding blogs. Comments are excluded and attachments as pictures on a page.HTML Export - Generates a HTML file for each page in this space, excluding blogs. Comments and attachments are optional.XML Export - Generates an XML file for each page in this space, including those not visible to you. The export includes comments and attachments, but excludes blog posts.Page access request - who can grant access to a restricted pageWhen a user requests access to a restricted page, Confluence will send an email to up to 5 people who are most likely to be able to grant access, in the following order: person who created a page people who have contributed to the page in the past from latest to newest can see the page and have ‘Restrict’ or ‘Admin’ space permission (sorted by last edit date) space administrators who can see the page (sorted alphabetically).Searching in ConfluenceOR search: searching for ‘marketing’ OR ‘digital’ will show results that contain one of these terms.AND search: searching for ‘marketing’ AND ‘digital’ will show results that contain both of these terms.NOT search: searching for ‘marketing’ NOT ‘digital’ will show results that only contain ‘marketing’ and do not contain ‘digital.’ Character minus is also allowed for example butter -cheeseGroup search: searching for (marketing OR digital) AND content will show results that can contain either ‘marketing’ or ‘digital,’ but must contain ‘content.’Wildcards For example, a search of b?g will show pages that have any of the following words: big, bug, bag, beg, or bog. A search of manag* will show pages that have words such as: manage, manager, management, managing, managerial, etc. You can combine exact matches, operators, and wildcards in one search query. For example, you can search manag* AND past? AND (“article” OR “post”)Good to know about searching Confluence ignores common words (stop words) — such as ‘and’, ‘the’, ‘or’, and ‘it’ — even if they are included within double quotes. For example, searching for “the IT budget” will only return pages containing ‘budget’, because ‘the’ and ‘it’ are stop words. Confluence doesn’t allow wildcards at the beginning of your search. You can’t search for hum or ?hum*, as they begin with a wildcardComments visibilityInline comments with (at)mentions don’t appear to viewers until the page is published.Any teammate (at)mentioned in a comment won’t be notified until you publish the page.NotificationsPage created/modified notificationsWho gets notified when a user, John Doe, modifies his page? A person (at)mentioned in the text is notified All watchers of the page are notified All watchers of the site are notified Everybody who liked the page is notified All followers of John Doe are notifiedNotifications are sent by e-mail and are available in the workbox button on the main toolbar of the pageEmail settingsAutowatchPages and blog posts that you create, edit or comment on will automatically be watched for future changes.Subscribe to daily updates You will receive a daily email report summarizing all changes that you have permission to view.Subscribe to all blog postsYou will receive an email when any blog post is added, even if it is in a space you aren’t watching. You won’t receive emails for comments on those blog posts, or changes to them.Subscribe to network You will receive an email when anyone you are following adds or changes content.Subscribe to new follower notificationsYou will receive an email when anyone chooses to follow you.Notify on my actionsYou will receive notifications for changes you make, in addition to other people’s changes.Show changed contentCheck this option to see changes made in Edit notification emails.Subscribe to recommended updatesYou will receive an email with recommended items based on comments and likes" }, { "title": "Global Loop advanced workflow in Jira", "url": "/posts/global-loop-advanced-workflow-jira/", "categories": "WORKFLOWS", "tags": "events, automation", "date": "2021-02-21 08:00:00 +0100", "snippet": "How to create a global loop transition?Let’s start with a simple workflowFor the purpose of this article, let’s use the following use case scenario:I need a global loop transition so I will be able to initiate an automation on every status.If I wanted this to be possible for only one status then I would use a local looping transition on only one status. In many use case scenarios this is enough.In my scenario, I want this special ‘Take over’ transition to be possible on every transition. I am not going to create four local looping transitions because I have four statuses. That is why I need a global loop transition and here is how you can do it too.Add a new global transition following the steps: click Add transition (1) then select options From status: Any status (2) select option To status: Itself (3). finally give the transition a name. When you click Add, you will see the additional and separate transition available.Adding a special EventThe simplest use case on how to use the global loop is to secure the editing of fields for some users.All you have to do is to place a secured field on a special transition screen which you hide from not authorized users with a workflow condition.In this article I wanted to show you a more advanced scenario - with Automation for Jira initiated by a special Jira event. The procedure described below will work only for Jira Server, because you cannot (yet?) assign Jira events to Automation for Jira Cloud.Let’s start from adding a new event in Jira. Go to Jira Administration / System / Event and add a new event. See the example below.Later on go to your workflow with a global loop transition and replace a generic event with a newly created event in your post-functions.Now your workflow with a global loop is ready for linking it with an Automation procedure.Using the Global Loop transition with Automation for JiraIn my use case I want to do three changes in one go when I press the Take Over button: Assign the issue to current user Add a comment that the issue has been taken over by a current user Send a notification about this change to a Reporter, if the Reporter is different from a current user. If you use the app Jira for Automation, this is how the Automation could look like.In the first part of this automation procedure, I declare that the procedure should be initiated only when a special event is triggered - Automation Start added to the workflow post-function.Then I edit the issue by changing the Assignee to current user and make a note about it in the Comments area: This issue has been taken over byIn the second part I check if the Reporter is not current user. If not, I want to send a current Reporter an e-mail notification that the issue has been taken over by a different user." }, { "title": "Jira workflow properties list", "url": "/posts/jira-workflow-properties-list/", "categories": "WORKFLOWS", "tags": "workflow-properties", "date": "2021-01-02 08:00:00 +0100", "snippet": "Disable permissionsDisable editingUse caseI want to disable edit property in the Resolved status for all users including AdministratorsWorkflow propertiesProperty key: jira.issue.editableProperty value: falseAlternative solutionProperty key: jira.permission.edit.deniedProperty value: (leave empty) Add this property to the Resolved status or any other final status.Use this property every time you want to make the issue on this status not editable. Comments and returning transitions will not be affected by this changeDisable worklogUse caseI want to disable work log on Resolved and Closed statusesWorkflow propertiesProperty key: jira.permission.work.deniedProperty value: (leave empty) Add this property to all statuses on Epics, where worklogs normally should not be addedDisable attachments addUse caseI want to disable adding new attachments in all statuses other then In ProgressWorkflow propertiesProperty key: jira.permission.attach.deniedProperty value: (leave empty)If you want to additionally disable deleting only own or all attachments, use one of the follwoing properties.Property key: jira.permission.attachdeleteown.deniedProperty key: jira.permission.attachdeleteall.deniedRestrict EditingRestrict the Edit permission to project role Administrators onlyUse caseI want to make issues in the Resolved status editable only to Administrators (or another single project role which I want to use) For this property to work, you need to check the role ID in project roles browser.Your property value may be different because your role ID for Administrator role can be different in your Jira instanceWorkflow propertiesProperty key: jira.permission.edit.projectroleProperty value: 10002Restrict the Edit permission to project rolesUse caseI want to make issues in the Resolved status editable only to Administrators AND Developers.In this case you need to configure properties for two roles so you need two workflow properties. Suffix 1 or 2 or 3….is used when you want the same property to be added two or more times.Workflow propertiesProperty key (1): jira.permission.edit.projectrole.1Property value: 10002Property key (2): jira.permission.edit.projectrole.2Property value: 10001Restrict the Edit permission to a user groupUse caseI want to make issues in the In Progress status editable only to a Jira group named jira-project-managers in my Jira instanceWorkflow propertiesProperty key: jira.permission.edit.groupProperty value: jira-project-managers You can use groups from Jira directory or other directories. There are generally hyphens or underscore characters used in the group naming convention.Restrict the Edit permissions for sub-tasksUse caseI want all sub-task to be editable only to a role Developers, when a Parent task Bug is in the In Progress statusWorkflow propertiesProperty key: jira.permission.subtasks.edit.projectroleProperty value: 10102 For this property to work, you need to check the role ID in project rolesDisable commentsDisable comments addUse caseI want to disable adding comments in the Resolved status so no change is added to resolved issuesWorkflow propertiesProperty key: jira.permission.comment.deniedProperty value: (leave empty) This property can be applied to any workflow status. Please note, that when disabled completely, comments will not be available on the transition screen either.Restrict comments to one project roleUse caseI want to enable adding comments in the Resolved status only to a Jira role named Administrators in my Jira instanceWorkflow propertiesProperty key: jira.permission.comment.projectroleProperty value: 10002Restrict comments to one user groupUse caseI want to enable adding comments in the In Progress status only to a Jira group named jira-developers in my Jira instanceWorkflow propertiesProperty key: jira.permission.comment.groupProperty value: jira-project-managers You can use groups from Jira directory or other directories. There are generally hyphens or underscore characters used in the group naming conventionDisable editing and commentingUse caseI want to make sure that it is not possible to edit and comment closed issues (in status Closed) for anyoneWorkflow propertiesProperty key (1): jira.issue.editableProperty value: falseProperty key (2): jira.permission.comment.deniedProperty value: (leave empty)Restrict Assignee changesRestrict changing AssigneeUse caseWhen a task is in Progress, I do not want anyone to change the Assignee. If someone needs to change the Assignee, they need to go back to the previous statusWorkflow propertiesProperty key: jjira.permission.assign.deniedProperty value: (leave empty)Restrict permission to change Assignee only to one user roleUse caseWhen a task is in Progress, I want only users in role Administrator to be able to change the AssigneeWorkflow propertiesProperty key: jira.permission.assign.projectroleProperty value: 10002" }, { "title": "Jira workflow properties - how to use them?", "url": "/posts/jira-workflow-properties-intro/", "categories": "WORKFLOWS", "tags": "workflow-properties", "date": "2020-12-31 08:00:00 +0100", "snippet": "Advanced workflow properties in Jira are very useful every time you need to introduce some restrictions on certain statuses or workflow transitions of a workflow. In this article I have collected my favorite permission-based properties that I use most often in advanced Jira configurations.Types of Jira workflow propertiesYou can utilize advanced workflow properties in the following scenarios:Status workflow properties Permission based properties - when you want to restrict a user to perform some action only on a specific status. This article focuses on these properties Transition workflow properties Change transition buttons order. Hide resolution values when resolving issues How to use permission-based workflow properties?The format of workflow properties isjira.permission.[subtasks.]{permission}.{user}.{suffix}where:jira.permission is a standard prefix[subtasks.] if specified, indicates that the permission applies to the subtasks of issues in this step{permission} is a short name specified in Permissions class (e.g. attach, resolve, close, delete, link, comment){user} is a description who will be affected by the permission property - user, group, assignee, reporter, lead, userCF, projectrole){suffix} is a number when you need to create the same property for more than one user/group/role Important:Workflow permissions are used only to locally restrict permissions that are set in the permission scheme. You can not grant permissions in this way.For example, in your permission scheme, if you have the ‘Add comments’ permission granted to only one project role, let us say ‘Developers’, you cannot then add this permission to other roles like ‘Managers’ using workflow properties.If the role ‘Managers’ is excluded on the permission scheme level, then adding them in the workflow property will not work.How to add workflow properties on status?To edit the status property, edit the workflow and: Select the status where you want to add some additional properties Click on properties linkTo add the status property, edit the following fields: Property key – a special series of property keys as described in examples below. It controls a particular type of permission and (optionally) a user or a group Property Value – put the value if it exists in the propertyPlease note, that you cannot edit once added property. To change a property you need to delete it and add a new property again.To delete a status property click on the link deleteHow to check the global project role ID in your Jira instance?Some workflow properties require the ID number of global project roles. Below I explain how to check this ID, so you can use it in the workflow permission property value.Go to Jira Administration / System / Project roles and click on any of the actionsSee the role ID in the address bar" }, { "title": "Jira Cloud Date/Time Settings", "url": "/posts/jira-instance-initial-configuration/", "categories": "SYSTEM", "tags": "jira-system-configuration", "date": "2020-09-13 09:00:00 +0200", "snippet": "After new Jira instance installation, it is necessary to update the default values for date formatting and first day of the week. It is needed to have properly displayed dates in fields like Due Date or in Sprint Planning.Jira System Advanced settingsGo to Jira Administration / General configuration / Advanced settingsSet the properties as follows:jira.date.picker.java.format = dd/MM/yyyyjira.date.picker.javascript.format = %d/%m/%Yjira.date.time.picker.java.format = dd/MM/yyyy HH:mmjira.date.time.picker.javascript.format = %d/%m/%Y %H:%MMore about date formats are explained here:https://confluence.atlassian.com/jira/changing-the-due-date-input-format-192536.htmlJira System Advanced settingsGo to Jira Administration / Look and feelIn the Date/Time Formats section at the very bottom, make the following changes. All the changes are saved automatically.Set the properties as follows:Time Format -&gt; HH:mmDay Format -&gt; EEEE HH:mmComplete Date/Time Format -&gt; dd/MM/yyyy HH:mmDay/Month/Year Format -&gt; dd/MM/yyyyUse ISO8601 standard in Date Picker -&gt; Set YesAdvanced settings exception in Jira Cloudjira.date.picker.* and jira.date.time.picker.* aren’t supported in the issue view.The issue view formats your dates and times based on your profile settings page, selected language.In practice this means that if you do not like the US format, eg: Sep 13, 2024 then go to your Atlassian Account, Account preferences, and change the format to UK.**Please Note:** You cannot have English language setup and the German (or any other country) date format any more. If you want to have English interface then you need to have either US or UK format.More about advanced settings in the Jira Cloud administration documentation:https://support.atlassian.com/jira-cloud-administration/docs/configure-advanced-settings/" }, { "title": "Calculate math result of two drop down values", "url": "/posts/calculate-math-result-of-two-drop-down-values/", "categories": "AUTOMATION, SmartValues", "tags": "smart-values-math", "date": "2020-09-12 09:00:00 +0200", "snippet": "Use caseI have two custom field fields: Impact, type: select List (single choice) with values: 1-Very Low 2-Low 3-Medium 4-High 5-Very High Probability, type: select List (single choice) with values: 1-Very Low 2-Low 3-Medium 4-High 5-Very High I have the third field - Risk Rating, type: Number FieldI want to send the result of calculations of Impact and Probability to the Risk rating fieldSolutionSmart value: {{#=}}{{issue.probability.value.left(1)}} * {{issue.impact.value.left(1)}}{{/}} value.left means to cut off the first character from the drop-down value.Automation configUse the smart value in the Edit Issue action.Result" } ]
